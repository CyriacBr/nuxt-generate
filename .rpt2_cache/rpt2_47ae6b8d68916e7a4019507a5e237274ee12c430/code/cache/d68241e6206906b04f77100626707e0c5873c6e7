{"code":"import { isTypeORM } from '../helper';\r\nexport default (function (_a) {\r\n    var cli = _a.cli, cName = _a.cName, dName = _a.dName, entityName = _a.entityName;\r\n    return \"\\n    \" + (isTypeORM(cli) &&\r\n        \"\\n      import { InjectRepository } from '@nestjs/typeorm';\\n      import { Repository, UpdateResult } from 'typeorm';\") + \"\\n    import { Injectable } from '@nestjs/common';\\n    import { \" + entityName + \" } from './\" + dName + \".entity';\\n\\n    @Injectable()\\n    export class \" + cName + \"Service {\\n        constructor(\\n            @InjectRepository(\" + entityName + \")\\n            private readonly repository: Repository<\" + entityName + \">,\\n        ) {}\\n\\n        findAll() {\\n            return this.repository.find();\\n        }\\n\\n        findById(id: number) {\\n            return this.repository.findOne(id);\\n        }\\n\\n        create(data: \" + entityName + \") {\\n            return this.repository.save(data);\\n        }\\n\\n        createBulk(data: \" + entityName + \"[]) {\\n          const tasks: Array<Promise<\" + entityName + \">> = [];\\n          for (const item of data) {\\n            tasks.push(this.repository.save(item));\\n          }\\n          try {\\n            return Promise.all(tasks);\\n          } catch (error) {\\n            throw error;\\n          }\\n        }\\n\\n        update(id: number, data: \" + entityName + \") {\\n            return this.repository.update(id, data);\\n        }\\n\\n        updateBulk(data: \" + entityName + \"[]) {\\n          const tasks: Array<Promise<UpdateResult>> = [];\\n          for (const item of data) {\\n            tasks.push(this.repository.update(item.id, item));\\n          }\\n          try {\\n            return Promise.all(tasks);\\n          } catch (error) {\\n            throw error;\\n          }\\n        }\\n\\n        delete(id: number) {\\n            return this.repository.delete(id);\\n        }\\n\\n        deleteBulk(idList: string) {\\n          const ids = idList.split(/D/).map(value => parseInt(value, 10));\\n          return this.repository\\n            .createQueryBuilder()\\n            .delete()\\n            .from(\" + entityName + \")\\n            .whereInIds(ids)\\n            .execute();\\n        }\\n    }\\n\";\r\n});\r\n","dts":{"name":"/media/cyriac/0CC5166B0CC5166B/Work/nest-g-crud/src/templates/service.template.d.ts","writeByteOrderMark":false,"text":"declare const _default: ({ cli, cName, dName, entityName }: any) => string;\r\nexport default _default;\r\n"}}
